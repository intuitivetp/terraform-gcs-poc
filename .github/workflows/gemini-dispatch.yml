name: Gemini Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  respond:
    if: contains(github.event.comment.body, '@gemini-cli')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract question
        id: question
        run: |
          COMMENT="${{ github.event.comment.body }}"
          # Remove @gemini-cli and any command prefix
          QUESTION=$(echo "$COMMENT" | sed "s/'//g" | sed 's/@gemini-cli//g' | sed 's/\/[a-z-]*//g' | xargs)
          echo "question=$QUESTION" >> $GITHUB_OUTPUT
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install Gemini CLI
        run: |
          # Install the Gemini CLI tool directly
          pip install google-generativeai

      - name: Run Gemini and Capture Response
        id: gemini_response
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Create a Python script to call Gemini
          cat > gemini_query.py << 'PYTHON_SCRIPT'
          import google.generativeai as genai
          import os
          import sys
          
          # Configure Gemini
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          
          # Get the question from command line
          question = sys.argv[1] if len(sys.argv) > 1 else "Hello"
          
          # Create the prompt
          prompt = f"""You are a helpful Terraform and GCP expert assistant.
          
          Context: This is a Terraform project for managing Google Cloud Storage buckets.
          
          User question: {question}
          
          Please provide a clear, helpful, and technically accurate answer.
          Include code examples if relevant."""
          
          # Call Gemini
          model = genai.GenerativeModel('gemini-2.0-flash-exp')
          response = model.generate_content(prompt)
          
          # Print the response
          print(response.text)
          PYTHON_SCRIPT
          
          # Run the script and capture output
          RESPONSE=$(python3 gemini_query.py "${{ steps.question.outputs.question }}")
          
          # Save to output using heredoc for multiline content
          echo "response<<GEMINI_EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "GEMINI_EOF" >> $GITHUB_OUTPUT

      - name: Comment response
        uses: actions/github-script@v7
        with:
          script: |
            const geminiOutput = `${{ steps.gemini_response.outputs.response }}`;
            
            // Log for debugging
            console.log('=== Gemini Output Debug ===');
            console.log('Output length:', geminiOutput.length);
            
            // Clean up the output
            const cleanOutput = geminiOutput.trim() || 'No response received from Gemini';
            
            // Post the comment
            await github.rest.issues.createComment({
              issue_number: ${{ steps.question.outputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ¤– Gemini Assistant Response\n\n**Question:** ${{ steps.question.outputs.question }}\n\n**Answer:**\n\n${cleanOutput}\n\n---\n*Powered by Gemini AI*`
            });